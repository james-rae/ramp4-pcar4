import{aJ as w,bh as y,H as l,n as I,q as m,u as g,C as V}from"./main-CUxU9bWS.js";import{c as H}from"./GraphicsCollection-dYEmqNuB.js";import"./colorUtils-Lyjc4zh-.js";import"./utils-QWndGYJy.js";import"./enums-CmIX1y88.js";import"./floatRGBA--1_ajEe6.js";import"./definitions-C0Jy3zs7.js";import"./UpdateTracking2D-CrJ_ss8x.js";import"./GeometryUtils-EAvci0xo.js";import"./vec2f32-BbH2jxlN.js";import"./OverrideHelper-B8uiocSy.js";import"./Container-C7mjs0vM.js";import"./MapView-C80OvaVE.js";import"./WGLContainer-Cb7DfFRU.js";import"./Texture-DNIxGOOy.js";import"./enums-Dk3osxpS.js";import"./Program-DwY7YdDp.js";import"./LabelMetric-CbEgObZ0.js";import"./StyleDefinition-BTt_i6C1.js";import"./enums-BRzLM11V.js";import"./GridShader-DUez2iHJ.js";import"./pbf-QXd8vFhO.js";import"./FeatureCommandQueue-BvKNg9dQ.js";import"./PieChartMeshWriter-DPoi77p-.js";import"./renderState-BqKKaxGi.js";import"./interfaces-DDtDqZYj.js";import"./testSVGPremultipliedAlpha-CDcFCOsJ.js";import{F as v}from"./GraphicsView2D-BshY6eNS.js";import"./earcut-Lltz9D9k.js";import"./vec3f32-nZdmKIgz.js";import"./UpdatingHandles-DKBfkAng.js";import"./projectBuffer-B22kEXxF.js";import{r as T,o as n,n as f}from"./imageUtils-Cv5BBHei.js";import{j as q,y as U}from"./LayerView-D_4KcN__.js";import{h as C}from"./HighlightGraphicContainer-B7xs2LvK.js";import{h as b,p as Q,r as S}from"./Tile-DOtUVU7h.js";import{e as d}from"./TileKey-Dkvv_foX.js";import{i as $}from"./RefreshableLayerView-DVI0I4JP.js";import{_ as F,R as P}from"./MapServiceLayerViewHelper-B-BtIdFB.js";import{r as L}from"./drapedUtils-D3Xuf41N.js";import{g as k}from"./Scheduler-C8rSErFt.js";import"./preload-helper-ExcqyqRp.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-CMoMXWBi.js";import"./BidiEngine-DNnuvc1i.js";import"./OptimizedFeature-CIptWNVu.js";import"./vec2-DGVIkCvT.js";import"./Rect-CUzevAry.js";import"./BindType-BmZEZMMh.js";import"./Util-C4yWdKVH.js";import"./vec2f64-B7N_6o8F.js";import"./ReactiveMap-DinfbfJz.js";import"./quantizationUtils-4P_ZGotl.js";import"./parser-D_L7gZcx.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DSQ66VqF.js";import"./Cyclical-BRtivmO1.js";import"./CollectionFlattener-CE6YYo8f.js";import"./workers-7zdfU5xG.js";import"./projection-BIYcHcNR.js";import"./TileInfo-DJ4jjAIs.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-DFPvIuq9.js";import"./uuid-Cl5lrJ4c.js";import"./signal-C5ejA8hs.js";import"./Map-B4HXk9gg.js";import"./Basemap-CQf1Qo_D.js";import"./loadAll-BdmQpFfa.js";import"./PortalItem-Ch5wKdnK.js";import"./writeUtils-C8gXbBL-.js";import"./compilerUtils-MfGGJ6jp.js";import"./TablesMixin-CisELdLf.js";import"./Layer-VQ4_KGgj.js";import"./HeightModelInfo-Bs21Ef5D.js";import"./Query-gAxGVVkN.js";import"./Field-7yKaqquJ.js";import"./fieldType-RAe-KhZA.js";import"./arcgisLayerUrl-Dpu7DwcZ.js";import"./ViewingMode-HRfKv6NR.js";import"./mat3-XZDRtl20.js";import"./unitBezier-BX6NeAEr.js";import"./vec32-BFI0q0ON.js";import"./imageUtils-CHVqqeVq.js";import"./capabilities-A2uoe7dc.js";import"./Version-CNYnG8Q4.js";import"./ColorBackground-CZD_imWe.js";import"./BufferObject-DEySkd40.js";import"./VertexArrayObject-DyW2Rd4i.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ProgramTemplate-BX-q2_CH.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-gwo6XIWk.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-DRbloVc_.js";import"./TimeOnly-UPu6MbGY.js";import"./UnknownTimeZone-3zgfWq7J.js";import"./timeSupport-BiBsHvcr.js";import"./queryUtils-x_fRYjy-.js";import"./json-Wa8cmqdu.js";import"./labelUtils-CnZtiCO7.js";import"./FieldsIndex-DosTqN4i.js";import"./diffUtils-MlvZK1EN.js";import"./constants-F8oTIn7N.js";import"./lengthUtils-D1bX0TD8.js";import"./QueueProcessor-CPy5oGqB.js";import"./TurboLine-CDLbKIcA.js";import"./basicInterfaces-CZwQPxTp.js";import"./normalizeUtilsSync-VmYnSQBX.js";import"./Bitmap-B4hBCFvW.js";import"./TileContainer-Dq3keeaN.js";import"./layerViewUtils-CMSpQZ1g.js";import"./AGraphicContainer-KAb39wAd.js";import"./TechniqueInstance-CrXFqeep.js";import"./quickselect-QQC62dOK.js";import"./languageUtils-yuBlGFLc.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-CYUZHEYe.js";import"./number-DwGyQ0sy.js";import"./popupUtils-GSlPvKwG.js";const E=[0,0];let h=class extends $(T(q(U))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new H,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),this._highlightView?.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new b(this.layer.tileInfo,this.layer.fullExtent,i?.effectiveMinLOD,i?.effectiveMaxLOD),this._fetchQueue=new Q({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r),scheduler:this.scheduler,priority:k.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new S({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),F(this,this.layer)){const e=this._highlightView=new v({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new P({createFetchPopupFeaturesQueryGeometry:(r,p)=>L(r,p,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,p)=>{e.graphicUpdateHandler({graphic:r,property:p})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):w()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return y(this.layer.tileInfo?.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(E,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:p=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(o){if(!l(o)&&!this.resampling)return n(this._tileInfoView.tileInfo.size);if(p<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const c=new d(u),_=await this.fetchTile(c,{...i,resamplingLevel:p+1});return f(this._tileInfoView,_,c,t)}}throw o}const s=new d(0,0,0,0);let a;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:r}),!this.resampling&&s.level!==t.level)return n(this._tileInfoView.tileInfo.size);a=await this._fetchImage(s,r)}catch(o){if(l(o))throw o;return n(this._tileInfoView.tileInfo.size)}return this.resampling?f(this._tileInfoView,a,s,t):a}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){l(i)||I.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};m([g()],h.prototype,"resampling",null),m([g()],h.prototype,"tilemapCache",null),h=m([V("esri.views.2d.layers.TileLayerView2D")],h);const Ni=h;export{Ni as default};
