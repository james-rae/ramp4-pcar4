import{by as T,U as z,V as B,aG as F,f4 as O,E as C,aw as U,D as A,f5 as N,f6 as E,bk as W,bz as H,q as v,u as S,C as K}from"./main-CUxU9bWS.js";import{K as k,W as J}from"./projection-BIYcHcNR.js";import{b as D,g as Y,d as Q}from"./kmlUtils-BCEBGmp2.js";import{c as P}from"./GraphicsCollection-dYEmqNuB.js";import{g as X,f as Z,S as tt}from"./Bitmap-B4hBCFvW.js";import{a as it}from"./BitmapContainer-ChefoiOn.js";import{j as et,y as rt}from"./LayerView-D_4KcN__.js";import{t as M}from"./GraphicContainer-C8IlUGdO.js";import{F as R}from"./GraphicsView2D-BshY6eNS.js";import{C as at,i as ot}from"./rasterProjectionHelper-LCqneVzQ.js";import{a as st}from"./WGLContainer-Cb7DfFRU.js";import{y as nt,o as lt}from"./RenderingContext-OYVZhVhN.js";import{D as $,G as pt,U as mt,X as j}from"./enums-Dk3osxpS.js";import{x as ht}from"./Program-DwY7YdDp.js";import{c as ct}from"./rasterUtils-DuDcFqlT.js";import{p as q,m as dt}from"./Texture-DNIxGOOy.js";import"./preload-helper-ExcqyqRp.js";import"./projectBuffer-B22kEXxF.js";import"./jsonUtils-DxQxwarO.js";import"./UniqueValueRenderer-q-xEqSsg.js";import"./RendererLegendOptions-ClFRbpMJ.js";import"./diffUtils-MlvZK1EN.js";import"./colorRamps-BcGQYd3C.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-BMp8yUlC.js";import"./compilerUtils-MfGGJ6jp.js";import"./lengthUtils-D1bX0TD8.js";import"./styleUtils-BDJDtTPo.js";import"./LRUCache-uHJJcn0o.js";import"./Version-CNYnG8Q4.js";import"./FieldsIndex-DosTqN4i.js";import"./UnknownTimeZone-3zgfWq7J.js";import"./OverrideHelper-B8uiocSy.js";import"./colorUtils-Lyjc4zh-.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-CMoMXWBi.js";import"./utils-QWndGYJy.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-4P_ZGotl.js";import"./heatmapUtils-DUymcvS2.js";import"./FeatureSet-DfeeRncM.js";import"./Field-7yKaqquJ.js";import"./fieldType-RAe-KhZA.js";import"./mat3-XZDRtl20.js";import"./MapView-C80OvaVE.js";import"./Cyclical-BRtivmO1.js";import"./CollectionFlattener-CE6YYo8f.js";import"./workers-7zdfU5xG.js";import"./TileInfo-DJ4jjAIs.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-DFPvIuq9.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-DKBfkAng.js";import"./signal-C5ejA8hs.js";import"./Map-B4HXk9gg.js";import"./Basemap-CQf1Qo_D.js";import"./loadAll-BdmQpFfa.js";import"./PortalItem-Ch5wKdnK.js";import"./writeUtils-C8gXbBL-.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DSQ66VqF.js";import"./TablesMixin-CisELdLf.js";import"./Layer-VQ4_KGgj.js";import"./HeightModelInfo-Bs21Ef5D.js";import"./ReactiveMap-DinfbfJz.js";import"./Query-gAxGVVkN.js";import"./arcgisLayerUrl-Dpu7DwcZ.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2f64-B7N_6o8F.js";import"./vec2-DGVIkCvT.js";import"./Tile-DOtUVU7h.js";import"./TileKey-Dkvv_foX.js";import"./QueueProcessor-CPy5oGqB.js";import"./quickselect-QQC62dOK.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-C8rSErFt.js";import"./vec32-BFI0q0ON.js";import"./definitions-C0Jy3zs7.js";import"./imageUtils-CHVqqeVq.js";import"./capabilities-A2uoe7dc.js";import"./ColorBackground-CZD_imWe.js";import"./Container-C7mjs0vM.js";import"./parser-D_L7gZcx.js";import"./layerViewUtils-CMSpQZ1g.js";import"./AGraphicContainer-KAb39wAd.js";import"./TechniqueInstance-CrXFqeep.js";import"./UpdateTracking2D-CrJ_ss8x.js";import"./BidiEngine-DNnuvc1i.js";import"./OptimizedFeature-CIptWNVu.js";import"./GeometryUtils-EAvci0xo.js";import"./Rect-CUzevAry.js";import"./LabelMetric-CbEgObZ0.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BindType-BmZEZMMh.js";import"./Util-C4yWdKVH.js";import"./TileContainer-Dq3keeaN.js";import"./FeatureCommandQueue-BvKNg9dQ.js";import"./BufferObject-DEySkd40.js";import"./VertexArrayObject-DyW2Rd4i.js";import"./constants-F8oTIn7N.js";import"./vec3f32-nZdmKIgz.js";import"./AttributeStore-DRbloVc_.js";import"./TimeOnly-UPu6MbGY.js";import"./timeSupport-BiBsHvcr.js";import"./featureConversionUtils-gwo6XIWk.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryUtils-x_fRYjy-.js";import"./json-Wa8cmqdu.js";import"./labelUtils-CnZtiCO7.js";import"./normalizeUtilsSync-VmYnSQBX.js";import"./ProgramTemplate-BX-q2_CH.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./webglDeps-mgwQlYzG.js";import"./NestedMap-CImDozOA.js";import"./renderState-BqKKaxGi.js";import"./basicInterfaces-CZwQPxTp.js";import"./interfaces-DDtDqZYj.js";import"./testSVGPremultipliedAlpha-CDcFCOsJ.js";import"./floatRGBA--1_ajEe6.js";import"./doublePrecisionUtils-B0owpBza.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl2");e.getExtension("OES_texture_float"),this._rctx=new nt(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},o=lt("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(o.shaders.vertexShader,o.shaders.fragmentShader,o.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new st(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,o=!1){const e=k(t.extent,r),a=new T({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:l,y:p}=at(a,r,t.extent);let s=(l+p)/2;const n=Math.round((e.xmax-e.xmin)/s),u=Math.round((e.ymax-e.ymin)/s);s=(e.width/n+e.height/u)/2;const I=new T({x:s,y:s,spatialReference:e.spatialReference}),_=ot({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),w=ct(this._rctx,_),y=new q(n,u);y.wrapMode=$.CLAMP_TO_EDGE;const h=new ht(this._rctx,y);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,n,u),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:x=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",x,f),this._program.setUniform2fv("u_transformSpacing",_.spacing),this._program.setUniform2fv("u_transformGridSize",_.size),this._program.setUniform2f("u_targetImageSize",n,u),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),o){const{width:c,height:V}=h,g=new ImageData(c??0,V??0);h.readPixels(0,0,c??0,V??0,pt.RGBA,mt.UNSIGNED_BYTE,g.data);const G=h.detachColorTexture(j.COLOR_ATTACHMENT0);return h.dispose(),{texture:G,extent:e,imageData:g}}const b=h.detachColorTexture(j.COLOR_ATTACHMENT0);return h.dispose(),{texture:b,extent:e}}reprojectBitmapData(t,r){const o=X(t.bitmapData)?Z(t.bitmapData):t.bitmapData,e=new q;e.wrapMode=$.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const a=new dt(this._rctx,e,o),l=this.reprojectTexture({texture:a,extent:t.extent},r,!0);l.texture.dispose();const p=document.createElement("canvas"),s=l.imageData;return p.width=s.width,p.height=s.height,p.getContext("2d").putImageData(s,0,0),{bitmapData:p,extent:l.extent}}async loadAndReprojectBitmapData(t,r,o){const e=(await z(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=e.width,a.height=e.height;const l=a.getContext("2d");l.drawImage(e,0,0);const p=l.getImageData(0,0,a.width,a.height);if(r.spatialReference.equals(o))return{bitmapData:p,extent:r};const s=this.reprojectBitmapData({bitmapData:p,extent:r},o);return{bitmapData:s.bitmapData,extent:s.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class L{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends et(rt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new it,this._kmlVisualData=new L,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new B}async hitTest(i,t){const r=this.layer;return[this._pointsView?.hitTest(i),this._polylinesView?.hitTest(i),this._polygonsView?.hitTest(i)].flat().filter(Boolean).map(o=>(o.layer=r,o.sourceLayer=r,{type:"graphic",graphic:o,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),F(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=O(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=C(this._polygonsView),this._polylinesView=C(this._polylinesView),this._pointsView=C(this._pointsView),this._imageReprojector=C(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,U.fromJSON(i.extent),this.view.spatialReference).then(t=>{const r=new tt(t.bitmapData);r.x=t.extent.xmin,r.y=t.extent.ymax,r.resolution=t.extent.width/t.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:o,httpQuery:e}=i;if(r!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let a;if(await J(),o!=null&&o!==1){const c=new U(t.extent);c.expand(o),a=c}else a=t.extent;a=k(a,A.WGS84);const l=k(a,A.WebMercator),p=a.xmin,s=a.xmax,n=a.ymin,u=a.ymax,I=t.size[0]*t.pixelRatio,_=t.size[1]*t.pixelRatio,w=Math.max(l.width,l.height),y={"[bboxWest]":p.toString(),"[bboxEast]":s.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":u.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":w.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":w.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":_.toString(),"[terrainEnabled]":"0","[clientVersion]":N,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const V in c){let g;for(g in y)c[V]=c[V].replace(g,y[g])}},x=E(r);h(x);let f={};e!=null&&(f=E(e),h(f));const b=W(i.href);return b.query={...b.query,...x,...f},`${b.path}?${H(x)}`}return i.href}async _fetchService(i){const t=new L;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async o=>{for(const e of o.sublayers){t.allSublayers.set(e.id,e);const a=e.points?await D(e.points):[],l=e.polylines?await D(e.polylines):[],p=e.polygons?await D(e.polygons):[],s=e.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...l.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...p.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...s.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,r)}}})}_fetchParsedKML(i,t){return Y(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>Q(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};v([S()],d.prototype,"_pointsView",void 0),v([S()],d.prototype,"_polylinesView",void 0),v([S()],d.prototype,"_polygonsView",void 0),v([S()],d.prototype,"updating",void 0),d=v([K("esri.views.2d.layers.KMLLayerView2D")],d);const Re=d;export{Re as default};
