import{J as S,bm as f,bn as d,bo as b,bp as I,bq as w,U as g,aw as $,aY as O,s as v,H as T,q as o,u as a,br as x,z as P,v as E,bs as L,C as F}from"./main-CUxU9bWS.js";import{t as M}from"./loadAll-BdmQpFfa.js";import{S as R}from"./MultiOriginJSONSupport--LuP6_0p.js";import{f as q}from"./Layer-VQ4_KGgj.js";import{i as J}from"./APIKeyMixin-e_Cmqj_M.js";import{m as _,f as j,t as N}from"./SublayersOwner-BMzOTZVb.js";import{l as U}from"./ArcGISService-D6klgNc1.js";import{l as A}from"./BlendLayer-CRA6VAX4.js";import{e as V}from"./CustomParametersMixin-aqwVckPS.js";import{b as k}from"./OperationalLayer-CBtw9AoM.js";import{j as z}from"./PortalLayer-COSV0Acm.js";import{f as C}from"./RefreshableLayer-DhBAjrgh.js";import{t as H}from"./ScaleRangeLayer-B2dXyvbe.js";import{l as Z}from"./TemporalLayer-DnPxXc7H.js";import{y as B}from"./commonProperties-BWvpypTA.js";import{y as D}from"./ExportImageParameters-CP5gzcMU.js";import{t as G}from"./imageBitmapUtils-ByIvnqAW.js";import{t as K}from"./versionUtils-oRnSy5Tr.js";import"./preload-helper-ExcqyqRp.js";import"./Version-CNYnG8Q4.js";import"./arcgisLayerUrl-Dpu7DwcZ.js";import"./portalItemUtils-BMjf2BVv.js";import"./projection-BIYcHcNR.js";import"./projectBuffer-B22kEXxF.js";import"./CollectionFlattener-CE6YYo8f.js";import"./UniqueValueRenderer-q-xEqSsg.js";import"./RendererLegendOptions-ClFRbpMJ.js";import"./diffUtils-MlvZK1EN.js";import"./colorRamps-BcGQYd3C.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-BMp8yUlC.js";import"./compilerUtils-MfGGJ6jp.js";import"./lengthUtils-D1bX0TD8.js";import"./styleUtils-BDJDtTPo.js";import"./jsonUtils-DxQxwarO.js";import"./LRUCache-uHJJcn0o.js";import"./FieldsIndex-DosTqN4i.js";import"./UnknownTimeZone-3zgfWq7J.js";import"./OverrideHelper-B8uiocSy.js";import"./colorUtils-Lyjc4zh-.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-CMoMXWBi.js";import"./utils-QWndGYJy.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-4P_ZGotl.js";import"./heatmapUtils-DUymcvS2.js";import"./QueryTask-n2JvsemA.js";import"./infoFor3D-_5f2f6Um.js";import"./Query-gAxGVVkN.js";import"./Field-7yKaqquJ.js";import"./fieldType-RAe-KhZA.js";import"./executeForIds-D7w8wFoT.js";import"./query-ScoHz3Q8.js";import"./pbfQueryUtils-D_M4Y8xK.js";import"./pbf-QXd8vFhO.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-B0hWeZIg.js";import"./executeQueryPBF-BRGsg5_w.js";import"./featureConversionUtils-gwo6XIWk.js";import"./FeatureSet-DfeeRncM.js";import"./executeQueryJSON-BqU0Lc8y.js";import"./featureLayerUtils-BNFY5TJB.js";import"./uuid-Cl5lrJ4c.js";import"./RelationshipQuery-DqTTQxFc.js";import"./FeatureType-D1FVPeL_.js";import"./FeatureTemplate-MAZrovrM.js";import"./labelingInfo-sXCz7XmM.js";import"./labelUtils-CnZtiCO7.js";import"./LayerFloorInfo-B91mXTg1.js";import"./Relationship-DDm6GyP_.js";import"./serviceCapabilitiesUtils-DOl5xdNq.js";import"./popupUtils-DHmw5Q00.js";import"./jsonUtils-aqm3pfo-.js";import"./parser-D_L7gZcx.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DSQ66VqF.js";import"./PortalItem-Ch5wKdnK.js";import"./TimeInfo-C3qfLVA5.js";import"./ElevationInfo-M4dU7fC5.js";let e=class extends A(Z(H(_(j(U(k(z(R(C(J(V(q)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new D({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(S).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,r,n,s){if(!this.loaded||!t)return;const m=t.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=f(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===d.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=b(m,i,d.SERVICE)}else if(l>d.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=b(m,i.sublayers,f(i.origin))}}const h=[],c={writeSublayerStructure:p,...s};let y=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const u=i.write({},c);h.push(u),y=y||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(r.layers=h),y&&(r.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(t,r,n,s){const m=s?.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=I({extent:t,width:r})*m;const p=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=t?.spatialReference,c=w(h);p.dpi*=m;const y={};if(s?.timeExtent){const{start:i,end:u}=s.timeExtent.toJSON();y.time=i&&u&&i===u?""+i:`${i??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:c,imageSR:c,size:r+","+n,...p,...l,...y}}async fetchImage(t,r,n,s){const{data:m}=await this._fetchImage("image",t,r,n,s);return m}async fetchImageBitmap(t,r,n,s){const{data:m,url:p}=await this._fetchImage("blob",t,r,n,s);return G(m,p,s?.signal)}async fetchRecomputedExtents(t={}){const r={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,r),{extent:s,fullExtent:m,timeExtent:p}=n,l=s||m;return{fullExtent:l&&$.fromJSON(l),timeExtent:p&&O.fromJSON({start:p[0],end:p[1]})}}loadAll(){return M(this,t=>{t(this.allSublayers),t(this.subtables)})}serviceSupportsSpatialReference(t){return K(this,t)}async _fetchImage(t,r,n,s,m){const p={responseType:t,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await g(l,p);return{data:h,url:l}}catch(h){throw T(h)?h:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){return!(t==null||!this.sublayersSourceJSON[t]?.visibleLayers)}};o([a(x("dateFieldsTimeReference"))],e.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],e.prototype,"datesInUnknownTimezone",void 0),o([a()],e.prototype,"dpi",void 0),o([a()],e.prototype,"gdbVersion",void 0),o([a()],e.prototype,"imageFormat",void 0),o([P("imageFormat",["supportedImageFormatTypes"])],e.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],e.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],e.prototype,"imageMaxWidth",void 0),o([a()],e.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],e.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],e.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],e.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],e.prototype,"popupEnabled",void 0),o([a(x("preferredTimeReference"))],e.prototype,"preferredTimeZone",void 0),o([a()],e.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],e.prototype,"sublayers",void 0),o([E("sublayers",{layers:{type:[N]},visibleLayers:{type:[L]}})],e.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],e.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],e.prototype,"type",void 0),o([a(B)],e.prototype,"url",void 0),e=o([F("esri.layers.MapImageLayer")],e);const we=e;export{we as default};
