import{G as S,bk as f,bl as d,bm as b,bn as I,bo as w,U as g,au as O,aW as T,s as v,E as P,k as i,o,bp as x,u as E,q as L,bq as F,A as M}from"./main-CvsyIoCL.js";import{t as R}from"./loadAll-DXPp8iKJ.js";import{S as _}from"./MultiOriginJSONSupport-c4P-kkU-.js";import{f as j}from"./Layer-CfZpHdF2.js";import{i as q}from"./APIKeyMixin-DCfv2kLl.js";import{m as N,f as U,t as J}from"./SublayersOwner-BC873Lu0.js";import{l as A}from"./ArcGISService-BfpXVVoF.js";import{l as k}from"./BlendLayer-cVVOSxs_.js";import{e as V}from"./CustomParametersMixin-zuGWlNac.js";import{b as z}from"./OperationalLayer-B1FNZRdu.js";import{j as G}from"./PortalLayer-DdsyY00t.js";import{f as W}from"./RefreshableLayer-CLNN43zE.js";import{t as Z}from"./ScaleRangeLayer-DVBCYfuO.js";import{l as $}from"./TemporalLayer-Bvv5nZYh.js";import{y as B}from"./commonProperties-D3cJE1_Y.js";import{y as C}from"./ExportImageParameters-BN-xyDET.js";import{t as D}from"./imageBitmapUtils-DNjdp6xF.js";import{t as H}from"./versionUtils-DUn0qZGM.js";let t=class extends k($(Z(N(U(A(z(G(_(W(q(V(j)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new C({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(S).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,a){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:s})=>s&&s.toArray().reverse()).toArray();let n=!1;const m=f(a.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(m===d.PORTAL_ITEM){const s=this.createSublayersForOrigin("service").sublayers;n=b(l,s,d.SERVICE)}else if(m>d.PORTAL_ITEM){const s=this.createSublayersForOrigin("portal-item");n=b(l,s.sublayers,f(s.origin))}}const h=[],c={writeSublayerStructure:n,...a};let y=n||this.hasVisibleLayersForOrigin(m);l.forEach(s=>{const u=s.write({},c);h.push(u),y=y||s.originOf("visible")==="user"}),h.some(s=>Object.keys(s).length>1)&&(r.layers=h),y&&(r.visibleLayers=l.filter(s=>s.visible).map(s=>s.id))}createExportImageParameters(e,r,p,a){const l=a?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=a?.floors??null,this._exportImageParameters.scale=I({extent:e,width:r})*l;const n=this._exportImageParameters.toJSON(),m=!a?.rotation||this.version<10.3?{}:{rotation:-a.rotation},h=e?.spatialReference,c=w(h);n.dpi*=l;const y={};if(a?.timeExtent){const{start:s,end:u}=a.timeExtent.toJSON();y.time=s&&u&&s===u?""+s:`${s??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:c,imageSR:c,size:r+","+p,...n,...m,...y}}async fetchImage(e,r,p,a){const{data:l}=await this._fetchImage("image",e,r,p,a);return l}async fetchImageBitmap(e,r,p,a){const{data:l,url:n}=await this._fetchImage("blob",e,r,p,a);return D(l,n,a?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await g(this.url,r),{extent:a,fullExtent:l,timeExtent:n}=p,m=a||l;return{fullExtent:m&&O.fromJSON(m),timeExtent:n&&T.fromJSON({start:n[0],end:n[1]})}}loadAll(){return R(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return H(this,e)}async _fetchImage(e,r,p,a,l){const n={responseType:e,signal:l?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,a,l),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(n.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:h}=await g(m,n);return{data:h,url:m}}catch(h){throw P(h)?h:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};i([o(x("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),i([o({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),i([o()],t.prototype,"dpi",void 0),i([o()],t.prototype,"gdbVersion",void 0),i([o()],t.prototype,"imageFormat",void 0),i([E("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),i([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),i([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),i([o()],t.prototype,"imageTransparency",void 0),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),i([o({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),i([o({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),i([o({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),i([o(x("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),i([o()],t.prototype,"sourceJSON",void 0),i([o({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),i([L("sublayers",{layers:{type:[J]},visibleLayers:{type:[F]}})],t.prototype,"writeSublayers",null),i([o({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),i([o({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),i([o(B)],t.prototype,"url",void 0),t=i([M("esri.layers.MapImageLayer")],t);const K=t;export{K as default};
