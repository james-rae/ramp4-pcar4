import{I as f,bA as y,U as S,Z as c,bo as s,bB as m,bf as l,bi as R}from"./main-CvsyIoCL.js";import{t as g}from"./query-Bnww9Pn6.js";import p from"./BinsQuery-C9_ZYTkE.js";import{d as b}from"./FeatureSet-DxgFy-Vy.js";function J(n){const t=n.geometry,o=n.toJSON(),e=o;let a,r,i;return t!=null&&(r=t.spatialReference,i=s(r),e.geometryType=m(t),e.geometry=JSON.stringify(t),e.inSR=i),o.outSR?(e.outSR=s(o.outSR),a=n.outSpatialReference):t&&(e.outSR=e.inSR,a=r),e.bin&&=JSON.stringify(e.bin),e.quantizationParameters&&=JSON.stringify(e.quantizationParameters),e.outStatistics&&=JSON.stringify(e.outStatistics),e.outTimeReference&&=JSON.stringify(e.outTimeReference),n.defaultSpatialReference&&l(r,a)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function N(n,t,o){return O(n,t,o)}async function O(n,t,o={}){const e=typeof n=="string"?f(n):n,a=t.geometry?[t.geometry]:[],r=await y(a,null,{signal:o.signal}),i=r?.[0];i!=null&&((t=t.clone()).geometry=i);const u=g({...e.query,f:"json",...J(t)});return S(c(e.path,"queryBins"),{...o,query:{...u,...o.query}})}async function d(n,t,o){const{data:e}=await N(R(n),p.from(t),o);return b.fromJSON(e)}export{d as executeBinsQuery};
