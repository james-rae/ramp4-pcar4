import{N as m,s,f as p}from"./main-BBr-PSD-.js";import{p as n}from"./MeshVertexAttributes-CgV6fVKF.js";import{B as a}from"./vertexSpaceConversion-DqclKViI.js";import"./preload-helper-B76NpbEU.js";import"./meshProperties-B4vupnXI.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-B5o_lm6j.js";import"./mat4-UUa7Y9ew.js";import"./mat4f64-q_b6UJoq.js";import"./vec32-3JDfVzu3.js";import"./spatialReferenceEllipsoidUtils-BHWa4OU4.js";import"./computeTranslationToOriginAndRotation-Lljt2UI2.js";import"./projectionUtils-BOihCovb.js";import"./projectPointToVector-D4HyTRdR.js";import"./meshVertexSpaceUtils-DBn_uChp.js";import"./MeshLocalVertexSpace-DAE6vnQP.js";import"./vec3-BIWPW-kP.js";import"./BufferView-B6C1iN4R.js";import"./vec2-ChnYg_BJ.js";import"./vec42-CKs01hkn.js";import"./vec2f64-Cgb6qxNH.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-BwmPwKuY.js";async function k(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{k as convertMeshVertexSpace};
