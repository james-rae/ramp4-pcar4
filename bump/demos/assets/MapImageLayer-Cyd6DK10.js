const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./mapImageLayerUtils-AMhnWpPT.js","./utils-DRMwi1nv.js","./main-BBr-PSD-.js","./preload-helper-B76NpbEU.js","./main-B_8sIZOq.css","./originUtils-CPX8CCAY.js","./multiOriginJSONSupportUtils-C0wm8_Yw.js","./PortalItem-D0vGDdGn.js","./jsonContext-BZdf1Cum.js","./portalItemUtils-Cjlals2b.js","./projectionUtils-BOihCovb.js","./saveUtils-BFeLjRjC.js"])))=>i.map(i=>d[i]);
import{_ as w}from"./preload-helper-B76NpbEU.js";import{b_ as O,o as $,b8 as v,b$ as f,c0 as _,$ as g,c1 as E,s as b,O as P,q as i,v as p,H as T,G as A,x as L,bX as F}from"./main-BBr-PSD-.js";import{t as M}from"./loadAll-DDdLsCdE.js";import{S as R}from"./MultiOriginJSONSupport-Vj9NS1eg.js";import{i as j}from"./scaleUtils-DlptsVLZ.js";import{h as V}from"./Layer-5T97SLi9.js";import{i as N}from"./APIKeyMixin-D1YPH2tf.js";import{m as q,f as J,a as U}from"./SublayersOwner-CALu7-AT.js";import{l as k}from"./ArcGISService-DkKvmoxg.js";import{p as z}from"./BlendLayer-BRY7pl6B.js";import{e as G}from"./CustomParametersMixin-DvOPoIJX.js";import{b as H,y as W}from"./OperationalLayer-C3IXO1Wv.js";import{j as D}from"./PortalLayer-DgK2kKY8.js";import{f as Z}from"./RefreshableLayer-kimwjkS4.js";import{t as B}from"./ScaleRangeLayer-DawYHpzK.js";import{c as C}from"./TemporalLayer-a3F44iZg.js";import{y as K}from"./ExportImageParameters-CR60otA7.js";import{t as X}from"./imageBitmapUtils-zelLrE9f.js";import{e as S}from"./sublayerUtils-B3DFq47i.js";import{t as Q}from"./versionUtils-CKm3FdAG.js";import{c as Y}from"./ElevationInfo-DRXRHzjq.js";import{u as ee}from"./TimeExtent-DcfGfIEp.js";import{a as x}from"./timeZoneUtils-C7fqg4nj.js";import{A as y}from"./interfaces-CL2NbQte.js";import"./asyncUtils-DntTXFsl.js";import"./Version-xJSCI_v8.js";import"./portalItemUtils-Cjlals2b.js";import"./projectionUtils-BOihCovb.js";import"./CollectionFlattener-BiTlu2Vr.js";import"./QueryTask-C4CqF3w2.js";import"./infoFor3D-DhzudQro.js";import"./Query-BaYaROcf.js";import"./Field-pLVK6yld.js";import"./fieldType-D4MHZHDA.js";import"./utils-DT1Tyhbj.js";import"./executeForIds-DJD5JZZq.js";import"./query-Co_Dx2Kg.js";import"./normalizeUtils-CQmJiTBa.js";import"./normalizeUtilsCommon-nuwtisbw.js";import"./utils-whjxyYDi.js";import"./pbfQueryUtils-tz6CJVXS.js";import"./pbf-DfbxEO3J.js";import"./memoryEstimations-CgsAYeye.js";import"./OptimizedGeometry--Lgdr7Bh.js";import"./OptimizedFeature-rVUVPfqT.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-C4i9vLLq.js";import"./executeQueryPBF-DUIeJL2D.js";import"./featureConversionUtils-BtTYvLpA.js";import"./FeatureSet-DvQy4XAF.js";import"./executeQueryJSON-BVvKNpvm.js";import"./OrderedLayer-DgaBZHpB.js";import"./OrderByInfo-CEwVshcI.js";import"./labelingInfo-BMQcuz_0.js";import"./uuid-Cl5lrJ4c.js";import"./SimpleRenderer-BbjYbYKC.js";import"./commonProperties-DFqRG3W_.js";import"./colorRamps-C49qmvt6.js";import"./ColorStop-9vL3kIYz.js";import"./visualVariableUtils-2KDs4BQz.js";import"./lengthUtils-CrC7NMXz.js";import"./UniqueValueRenderer-BB27G7NO.js";import"./diffUtils-MMYJN98N.js";import"./RendererLegendOptions-BD_9VfWt.js";import"./styleUtils-PMgHmwHx.js";import"./RelationshipQuery-BWufEX6r.js";import"./NormalizationBinParametersMixin-uuSDn6ER.js";import"./labelUtils-DYigswdU.js";import"./FeatureType-8vBonJwk.js";import"./FeatureTemplate-vVQd5w6h.js";import"./FieldsIndex-DuKrAwAZ.js";import"./UnknownTimeZone-Ca1nDbBC.js";import"./LayerFloorInfo-CaGWZpVN.js";import"./Relationship-CrZFM6GT.js";import"./serviceCapabilitiesUtils-Cqys2BFD.js";import"./typeUtils-CNN__xnd.js";import"./ClassBreaksRenderer-Cs0IR6Vn.js";import"./LRUCache-BB1cebTv.js";import"./MemCache-BSBM3Sy1.js";import"./DictionaryScriptEvaluator-BvsFXYOe.js";import"./ArcadeExpression-CqyvGjoE.js";import"./TimeOnly-C3i8Z7NO.js";import"./enum-KdbueJV6.js";import"./utils-BV7DBUkI.js";import"./defaultCIMValues-CQAn2izL.js";import"./enums-_AFKM9Yk.js";import"./heatmapUtils-D35eaff2.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-DPb6J-GU.js";import"./popupUtils-7JAgBcZx.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-CjxxWDew.js";import"./parser-B0CEcIXX.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-UUa7Y9ew.js";import"./PortalItem-D0vGDdGn.js";import"./TimeInfo-E4rUPQKR.js";import"./floorFilterUtils-DKzVzLpH.js";let r=class extends z(C(B(q(J(k(H(D(R(Z(N(G(V)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new K({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new Y({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=O(async(t,m,a)=>{const{save:n,saveAs:s}=await w(()=>import("./mapImageLayerUtils-AMhnWpPT.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11]),import.meta.url);switch(t){case y.SAVE:return n(this,m);case y.SAVE_AS:return s(this,a,m)}})}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const m=t.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,m,a){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let s=!1;const l=v(a.origin);let u;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===f.PORTAL_ITEM){const o=this.createSublayersForOrigin("service").sublayers;s=S(n,o,f.SERVICE)}else if(l>f.PORTAL_ITEM){const o=this.createSublayersForOrigin("portal-item");s=S(n,o.sublayers,v(o.origin)),u=o.originWithPartialOverrides}}const c=[],d={writeSublayerStructure:s,...a,minimumWritableOrigin:u};let h=s||this.hasVisibleLayersForOrigin(l);n.forEach(o=>{const I=o.write({},d);c.push(I),h=h||o.originOf("visible")==="user"}),c.some(o=>Object.keys(o).length>1)&&(t.layers=c),h&&(t.visibleLayers=n.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,t,m,a){const n=a?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=a?.floors??null,this._exportImageParameters.scale=j({extent:e,width:t})*n;const s=this._exportImageParameters.toJSON(),l=!a?.rotation||this.version<10.3?{}:{rotation:-a.rotation},u=e?.spatialReference,c=_(u);s.dpi*=n;const d={};if(a?.timeExtent){const{start:h,end:o}=a.timeExtent.toJSON();d.time=h&&o&&h===o?""+h:`${h??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:c,imageSR:c,size:t+","+m,...s,...l,...d}}async fetchImage(e,t,m,a){const{data:n}=await this._fetchImage("image",e,t,m,a);return n}async fetchImageBitmap(e,t,m,a){const{data:n,url:s}=await this._fetchImage("blob",e,t,m,a);return X(n,s,a?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,t),{extent:a,fullExtent:n,timeExtent:s}=m,l=a||n;return{fullExtent:l&&E.fromJSON(l),timeExtent:s&&ee.fromJSON({start:s[0],end:s[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchImage(e,t,m,a,n){const s={responseType:e,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,m,a,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(s.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:s.query});try{const{data:u}=await g(l,s);return{data:u,url:l}}catch(u){throw P(u)?u:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:u})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};i([p(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),i([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),i([p()],r.prototype,"dpi",void 0),i([p()],r.prototype,"elevationInfo",void 0),i([p()],r.prototype,"gdbVersion",void 0),i([p()],r.prototype,"imageFormat",void 0),i([T("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),i([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),i([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),i([p()],r.prototype,"imageTransparency",void 0),i([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),i([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),i([p(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),i([p()],r.prototype,"sourceJSON",void 0),i([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),i([A("sublayers",{layers:{type:[U]},visibleLayers:{type:[F]}})],r.prototype,"writeSublayers",null),i([p({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),i([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),i([p(W)],r.prototype,"url",void 0),r=i([L("esri.layers.MapImageLayer")],r);const Dt=r;export{Dt as default};
