import{bK as a,O as c,i as y,q as u,v as w,x as g}from"./main-v58lMUCa.js";import{r as I,n as f}from"./imageUtils-CbRV-y6H.js";import{S}from"./LayerView2D-BuE2tDBZ.js";import{h as T,p as V,r as v}from"./enums-BuedYLa0.js";import{e as d}from"./TileKey-DO96xLUI.js";import{u as x}from"./LayerView-DDPzVte2.js";import{i as q}from"./RefreshableLayerView-DJNXl2RJ.js";import{g as M}from"./Scheduler-Bh5s-c58.js";import"./preload-helper-B76NpbEU.js";import"./MapView-DaiwjNWG.js";import"./Cyclical-DihWIo9Q.js";import"./CollectionFlattener-vA5I5Yl7.js";import"./workers-CenfzXP7.js";import"./Queue-BZL6Ok5H.js";import"./intl-CqLjsk_y.js";import"./projectionUtils-DntLqo15.js";import"./TileInfo-By1VL5sL.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-CwXPs3qu.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-BXjLv0dz.js";import"./asyncUtils-DczaNmLN.js";import"./utils-BPyKKQMp.js";import"./Version-BUngY1a7.js";import"./Map-BISX7tFU.js";import"./Basemap-bYVqyl01.js";import"./loadAll-Cw5wtart.js";import"./PortalItem-BAwmhDV2.js";import"./writeUtils-BfirfAdA.js";import"./persistable-DvLK8FNP.js";import"./MD5-MtSiOt06.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-Cp1grjM4.js";import"./PolygonCollection-C1rWG1Kk.js";import"./editableLayers-OFmzKGRG.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-DAFNYuRY.js";import"./common-DQOJ18NT.js";import"./TablesMixin-CWeAHQk6.js";import"./Layer-Cpemf-us.js";import"./TimeExtent-DxW9JGiL.js";import"./GraphicsCollection-DuATt1lH.js";import"./HeightModelInfo-Ct0QdHwh.js";import"./timeZoneUtils-CtM6l8wx.js";import"./ReactiveMap-Bo9mkAXJ.js";import"./Query-DLI5s2kX.js";import"./Field-BOT4iYOw.js";import"./fieldType-Cxu0PONE.js";import"./IViewEvents-Bci6PjlS.js";import"./mat2df64-CH-gvrN5.js";import"./a11yUtils-BerALs48.js";import"./projectionUtils-CJAtvwoa.js";import"./ViewingMode-Chk7YAAL.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./mat2d-D9DBP-jx.js";import"./normalizeUtils-zX1bTttY.js";import"./normalizeUtilsCommon-DyT0iI4D.js";import"./utils-z68zByQP.js";import"./utils-B_0mPsCj.js";import"./mat2df32-Dpt2CT5P.js";import"./mat3-CruJiiUv.js";import"./vec2f32-CaVKkSa6.js";import"./vec32-D1oAcXxi.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CASyCajO.js";import"./enums-UBzvFP7O.js";import"./Texture-DSvsp2M6.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./imageUtils-WnkYnyhD.js";import"./capabilities-Bi6C4OG6.js";import"./modeUtils-1fSvrGRf.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./ColorBackground-CVU5NP0T.js";import"./BitmapTechnique-BU34aXeO.js";import"./Container-B9R0wXYw.js";import"./EffectView-D7r6Wykh.js";import"./parser-CAVedsF4.js";import"./GraphShaderModule--s0jI5IB.js";import"./FramebufferObject-uO_4sL56.js";import"./VertexArrayObject-BbhoxAUx.js";import"./memoryEstimations-CDa7pwx5.js";import"./ProgramTemplate-CzmtUOIH.js";import"./ShaderBuilder-Cc_cfWKy.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-CFPo0AVB.js";import"./bitmapUtils-CE602mFY.js";import"./WGLContainer-C21iDTI3.js";import"./Utils-BJg0v_iG.js";import"./BoundingBox-BSOANoLO.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-CQkO14Uj.js";import"./enums-_AFKM9Yk.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-BlfgH2KO.js";import"./OptimizedFeature-QSUbKdUk.js";import"./OptimizedGeometry-BzcXQ07M.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./TileContainer-Ogj39wJi.js";import"./utils-BQBvadb7.js";import"./layerViewUtils-yb3vPuU1.js";import"./quickselect-QQC62dOK.js";import"./debugFlags-BvRoJ_s_.js";const R=[0,0];let r=class extends q(I(S(x))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const{activeLayer:t}=this.layer,{tileMatrixSet:e}=t;if(e&&a(e.tileInfo?.spatialReference,this.view.spatialReference))return e;const i=this._getTileMatrixSetBySpatialReference(t);return i&&i.id!==t.tileMatrixSetId?(t.tileMatrixSetId=i.id,i):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){const t=this.tileMatrixSet?.tileInfo;t&&(this._tileInfoView=new T(t),this._fetchQueue=new V({tileInfoView:this._tileInfoView,concurrency:16,process:(e,i)=>this.fetchTile(e,i),scheduler:this.scheduler,priority:M.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new v({cachePolicy:"keep",resampling:!0,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add(()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet],()=>this.doRefresh())),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets?.some(e=>a(e.tileInfo?.spatialReference,t))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:o,resamplingLevel:m=0}=e;if(!i)return this._fetchImage(t,o);const s=new d(0,0,0,0);let l;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:o}),l=await this._fetchImage(s,o)}catch(p){if(c(p))throw p;if(m<3){const h=this._tileInfoView.getTileParentId(t.id);if(h){const n=new d(h),_=await this.fetchTile(n,{...e,resamplingLevel:m+1});return f(this._tileInfoView,_,n,t)}}throw p}return f(this._tileInfoView,l,s,t)}canResume(){const t=super.canResume();return t&&this.tileMatrixSet!==null}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){c(e)||y.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}_getTileMatrixSetBySpatialReference(t){return t.tileMatrixSets?.find(e=>a(e.tileInfo?.spatialReference,this.view.spatialReference))}};u([w({readOnly:!0})],r.prototype,"tileMatrixSet",null),r=u([g("esri.views.2d.layers.WMTSLayerView2D")],r);const Me=r;export{Me as default};
