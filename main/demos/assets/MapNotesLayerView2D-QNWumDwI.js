import{bx as u,V as f,br as w,a3 as n,ad as p,e4 as h,af as y,q as _,x as V}from"./main-k8tKZnmb.js";import{S as v}from"./LayerView2D-YoNtM_-0.js";import{t as g}from"./GraphicContainer-CR3DwYJI.js";import{O as c}from"./GraphicsView2D-B2tSVXMp.js";import{u as C}from"./LayerView-Bb9A-g7c.js";import"./preload-helper-B76NpbEU.js";import"./utils-BQBvadb7.js";import"./Container-B8SsxJG4.js";import"./MapView-B3viiXHw.js";import"./Cyclical-DApsoXUX.js";import"./CollectionFlattener-CEyLY-gI.js";import"./workers-D5nzg_qR.js";import"./Queue-C89snT1g.js";import"./intl-RjT9zNQm.js";import"./projectionUtils-DIS7PC4A.js";import"./TileInfo-Cgg3olE6.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-Ua3BOprA.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-BCLFXPsO.js";import"./asyncUtils-D0EMTWm1.js";import"./utils-4iSImE8N.js";import"./Version-Bshojf6J.js";import"./Map-zwp6Tlo7.js";import"./Basemap-4P26dkXC.js";import"./loadAll-Cxr_Tk8y.js";import"./PortalItem-CYuvzu9i.js";import"./writeUtils-C7HIMvCx.js";import"./persistable-CoSCx_Zl.js";import"./MD5-MtSiOt06.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-Bxg6zm5w.js";import"./PolygonCollection-C3D0YHu_.js";import"./editableLayers-BVWT-MIW.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-BAfIq2QH.js";import"./common-DQOJ18NT.js";import"./TablesMixin-DIHHjC8_.js";import"./Layer-D8DDahaf.js";import"./TimeExtent-D6pCjbMu.js";import"./GraphicsCollection-CKuL-c8X.js";import"./HeightModelInfo-CLiUZYJY.js";import"./timeZoneUtils-ky29T8ln.js";import"./ReactiveMap-BVp67DiA.js";import"./Query-DhjRt9T2.js";import"./Field-Clg3ZxG8.js";import"./fieldType-mqNBNOeO.js";import"./IViewEvents-Bci6PjlS.js";import"./mat2df64-CH-gvrN5.js";import"./a11yUtils-BOcrwCVQ.js";import"./projectionUtils-DUI3_StO.js";import"./ViewingMode-Chk7YAAL.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./mat2d-D9DBP-jx.js";import"./normalizeUtils-DaIorkvk.js";import"./normalizeUtilsCommon-BWyMqclx.js";import"./utils-nKLuUXi2.js";import"./utils-Nx2AyMpl.js";import"./mat2df32-Dpt2CT5P.js";import"./mat3-CruJiiUv.js";import"./vec2f32-CaVKkSa6.js";import"./Scheduler-Cwi4gh8e.js";import"./debugFlags-CTi8LP6B.js";import"./vec32-zWZ2UyKY.js";import"./unitBezier-B1N-tmtC.js";import"./enums-CYA9bPPo.js";import"./TileKey-RkMamIuh.js";import"./quickselect-QQC62dOK.js";import"./definitions-CASyCajO.js";import"./enums-UBzvFP7O.js";import"./Texture-D4hDUUnZ.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./imageUtils-XUnZEdLq.js";import"./capabilities-Bi6C4OG6.js";import"./modeUtils-1fSvrGRf.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./ColorBackground-D8XChhwc.js";import"./EffectView-BQ7snyGZ.js";import"./parser-Zx2wAts1.js";import"./layerViewUtils-R-fpY5l5.js";import"./AGraphicContainer-ioF__u8h.js";import"./TechniqueInstance-CIhJrwnN.js";import"./UpdateTracking2D-DkLjg-2x.js";import"./Utils-CHR2SqvR.js";import"./BoundingBox-BSOANoLO.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-C0dCMKxo.js";import"./VertexArrayObject-kxTZ7rqR.js";import"./memoryEstimations-CZ51G4hw.js";import"./TileContainer-7W_9qRZ_.js";import"./WGLContainer-B5I5DaWh.js";import"./ProgramTemplate-CRSdf7Kn.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-CQkO14Uj.js";import"./enums-_AFKM9Yk.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-gZP9czlS.js";import"./OptimizedFeature-CbZ7bgx-.js";import"./OptimizedGeometry-DNfcmlS2.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-Bgt_OadJ.js";import"./CIMSymbolHelper-rEQOND71.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-CXByxOsj.js";import"./GeometryUtils-B0cujf_5.js";import"./utils-BV7DBUkI.js";import"./defaultCIMValues-CQAn2izL.js";import"./rasterizingUtils-BdstbTuy.js";import"./floatRGBA-CK1VYSlm.js";import"./Rect-CUzevAry.js";import"./TechniqueType-CFPo0AVB.js";import"./GraphShaderModule-BMPDF0to.js";import"./ShaderBuilder-llCBvZkx.js";import"./BindType-BBwFZqyN.js";import"./utils-DnL75I-j.js";import"./constants-BFLErLYb.js";import"./lengthUtils-Dg4onrdA.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CJyDyx3p.js";import"./FieldsIndex-DAzXbx6Z.js";import"./UnknownTimeZone-CpqFNwpB.js";import"./OverrideHelper-DC0F2XHG.js";import"./colorUtils-CZ-IPTbQ.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./ArcadeExpression-Bvob0Gfz.js";import"./TimeOnly-dibSUpm0.js";import"./enum-OZiVVS0w.js";import"./callExpressionWithFeature-CtrReD22.js";import"./quantizationUtils-Cgf554Hg.js";import"./AttributeStore-CrP_65Bl.js";import"./labelUtils-CGyxyV31.js";import"./diffUtils-0GlP_MNw.js";import"./queryUtils-D-MMvOPg.js";import"./json-Wa8cmqdu.js";import"./timeSupport-Cm0S4HK2.js";import"./normalizeUtilsSync-eN2v4kOb.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-BN6BikUz.js";const d="sublayers",m="layerView",b=new Set(["default"]);let l=class extends v(C){constructor(){super(...arguments),this._highlightIds=new Map}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,r){return Array.from(this.graphicsViews(),t=>{const o=t.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const s=this._graphicsViewsFeatureCollectionMap.get(t);for(const e of o)!e.popupTemplate&&s.popupTemplate&&(e.popupTemplate=s.popupTemplate),e.sourceLayer=e.layer=this.layer}return o}).flat().map(t=>({type:"graphic",graphic:t,layer:this.layer,mapPoint:i}))}highlight(i,r="default"){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const o=t?.filter(w);return o?.length?(this._addHighlight(o),n(()=>this._removeHighlight(o))):n()}update(i){for(const r of this.graphicsViews())r.processUpdate(i)}attach(){const i=this.view,r=()=>this.requestUpdate(),t=this.layer.featureCollections;if(t!=null&&t.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const o of t){const s=new g(this.view.featuresTilingScheme),e=new c({view:i,graphics:o.source,renderer:o.renderer,requestUpdateCallback:r,container:s});this._graphicsViewsFeatureCollectionMap.set(e,o),this.container.addChild(e.container),this.addHandles([p(()=>o.visible,a=>e.container.visible=a,h),p(()=>e.updating,()=>this.notifyChange("updating"),h)],m)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.removeHandles(d)}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(m);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],r=this.view,t=()=>this.requestUpdate();for(const o of this.layer.sublayers){const s=new g(this.view.featuresTilingScheme);s.fadeTransitionEnabled=!0;const e=new c({view:r,graphics:o.graphics,requestUpdateCallback:t,container:s});this.addHandles([o.on("graphic-update",e.graphicUpdateHandler),p(()=>o.visible,a=>e.container.visible=a,h),p(()=>e.updating,()=>this.notifyChange("updating"),h)],m),this.container.addChild(e.container),i.push(e)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const r of i)if(this._highlightIds.has(r)){const t=this._highlightIds.get(r);this._highlightIds.set(r,t+1)}else this._highlightIds.set(r,1);this._updateHighlight()}_removeHighlight(i){for(const r of i)if(this._highlightIds.has(r)){const t=this._highlightIds.get(r)-1;t===0?this._highlightIds.delete(r):this._highlightIds.set(r,t)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys()),r=this._getHighlightBits(b.values());for(const t of this.graphicsViews())t.setHighlight(i.map(o=>({objectId:o,highlightFlags:r})))}};l=_([V("esri.views.2d.layers.MapNotesLayerView2D")],l);const er=l;export{er as default};
