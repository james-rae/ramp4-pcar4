import{N as m,s,f as p}from"./main-k8tKZnmb.js";import{p as n}from"./MeshVertexAttributes-DhKsfDrx.js";import{B as a}from"./vertexSpaceConversion-Yl2iZFqy.js";import"./preload-helper-B76NpbEU.js";import"./meshProperties-B4vupnXI.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-B5o_lm6j.js";import"./mat4-BAfIq2QH.js";import"./mat4f64-q_b6UJoq.js";import"./vec32-zWZ2UyKY.js";import"./spatialReferenceEllipsoidUtils-C2rqABan.js";import"./computeTranslationToOriginAndRotation-BFp6OMRa.js";import"./projectionUtils-DIS7PC4A.js";import"./projectPointToVector-iJo27imc.js";import"./meshVertexSpaceUtils-CC2nFNW3.js";import"./MeshLocalVertexSpace-BcvAGWfu.js";import"./vec3-C0tN6hkp.js";import"./BufferView-DsM_RLth.js";import"./vec2-ChnYg_BJ.js";import"./vec42-CKs01hkn.js";import"./vec2f64-Cgb6qxNH.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-CH0HlDPC.js";async function k(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{k as convertMeshVertexSpace};
