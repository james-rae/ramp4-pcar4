import{U as m,s,ak as p}from"./main-6quFNups.js";import{p as n}from"./MeshVertexAttributes-LJ-3d_5J.js";import{B as a}from"./vertexSpaceConversion-ao8tT8aq.js";import"./preload-helper-ExcqyqRp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-C5nbHoGE.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-xW7S-hCa.js";import"./spatialReferenceEllipsoidUtils-DllmHP2K.js";import"./computeTranslationToOriginAndRotation-C8sPqn7c.js";import"./projection-DqXfl-Vo.js";import"./projectPointToVector-Cgxt6gvS.js";import"./meshVertexSpaceUtils-CgoHl1M5.js";import"./MeshLocalVertexSpace-754YP2Eb.js";import"./vec3-DIlcEj8j.js";import"./BufferView-BvtQIDNC.js";import"./vec2-maR1OrZI.js";import"./vec42-CKs01hkn.js";import"./vec4-CKNW2UZL.js";async function P(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{P as convertMeshVertexSpace};
