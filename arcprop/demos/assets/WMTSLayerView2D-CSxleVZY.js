import{bG as p,bc as c,n as y,v as u,x as w,J as g}from"./main-6quFNups.js";import{r as I,n as f}from"./imageUtils-GfPeRUKb.js";import{S}from"./LayerView2D-BvwNnK_4.js";import{h as T,p as V,r as v,e as d}from"./Tile-iNF7sB7Q.js";import{y as x}from"./LayerView-dhjy9Q3O.js";import{i as M}from"./RefreshableLayerView-CgJBZcZx.js";import{g as q}from"./Scheduler-CGs3vqLA.js";import"./preload-helper-ExcqyqRp.js";import"./MapView-D6JxKHsk.js";import"./globalCss-C4MV-dFx.js";import"./Queue-C89HhVJm.js";import"./signal-BQC6Vdrb.js";import"./Version-CoyC2tgY.js";import"./CollectionFlattener-DAhdUqkJ.js";import"./workers-C2CNcAmR.js";import"./intl-AgB03gne.js";import"./projection-DqXfl-Vo.js";import"./TileInfo-DvSeUvHN.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-C-ojz6ZC.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-ChhgSV9z.js";import"./Map-CAHx89Fp.js";import"./Basemap-C9UiNqB6.js";import"./loadAll-BZVPBRgW.js";import"./PortalItem-Bu_JIDdc.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-C5nbHoGE.js";import"./common-DQOJ18NT.js";import"./Layer-BO-54PU5.js";import"./TimeExtent-DzeR00n-.js";import"./GraphicsCollection-96dRpTEG.js";import"./HeightModelInfo-DCMwS1uc.js";import"./timeZoneUtils-DWgWPlk8.js";import"./ReactiveMap-9U9R9mmN.js";import"./Query-BMbdToTX.js";import"./Field-CoXg2Ffq.js";import"./fieldType-DXs8Zb8b.js";import"./IViewEvents-Bci6PjlS.js";import"./HighlightDefaults-CY1o7i8Z.js";import"./a11yUtils-CRzEKdrE.js";import"./heightModelInfoUtils-DmfFQIbH.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2-maR1OrZI.js";import"./vec2f64-DohEyf3f.js";import"./mat2d-D9DBP-jx.js";import"./normalizeUtils-CEZHBUPE.js";import"./utils-50ACXivP.js";import"./utils-DoHHh0aQ.js";import"./mat2df32-orApM5a3.js";import"./mat3-CruJiiUv.js";import"./vec2f32-BbH2jxlN.js";import"./vec32-xW7S-hCa.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CPtb4TQS.js";import"./enums-Dk3osxpS.js";import"./Texture-DEwFxB4M.js";import"./getDataTypeBytes-DflDeYgv.js";import"./imageUtils-BVPGnyKk.js";import"./themeUtils-C3zvZbsE.js";import"./ColorBackground-Cob8POor.js";import"./BitmapTechnique-CxC-jUjw.js";import"./Container-Wt7Eofc2.js";import"./EffectView-BUZQoRFr.js";import"./parser-B5NINrTS.js";import"./GraphShaderModule-CemBcww_.js";import"./FramebufferObject-C9mHCG0I.js";import"./VertexArrayObject-CKJWtwFN.js";import"./memoryEstimations-BxOZ4r8L.js";import"./ProgramTemplate-DRUuRm_m.js";import"./ShaderBuilder-CLXObBdq.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-BIcFQrYK.js";import"./dataViewUtils-vipej-kK.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-CnpCxTZE.js";import"./vec3f32-nZdmKIgz.js";import"./config-DoMhnbNN.js";import"./enums-BJSSbDkD.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-CvJmAoRi.js";import"./OptimizedFeatureSet-C-jNiUSk.js";import"./OptimizedGeometry-BuHcxlp9.js";import"./TileContainer-DoifbFof.js";import"./utils-BQBvadb7.js";import"./layerViewUtils-CV7lmwHY.js";import"./quickselect-QQC62dOK.js";const R=[0,0];let r=class extends M(I(S(x))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const{activeLayer:t}=this.layer,{tileMatrixSet:e}=t;if(e&&p(e.tileInfo?.spatialReference,this.view.spatialReference))return e;const i=this._getTileMatrixSetBySpatialReference(t);return i&&i.id!==t.tileMatrixSetId?(t.tileMatrixSetId=i.id,i):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){const t=this.tileMatrixSet?.tileInfo;t&&(this._tileInfoView=new T(t),this._fetchQueue=new V({tileInfoView:this._tileInfoView,concurrency:16,process:(e,i)=>this.fetchTile(e,i),scheduler:this.scheduler,priority:q.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new v({cachePolicy:"keep",resampling:!0,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add(()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet],()=>this.doRefresh())),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets?.some(e=>p(e.tileInfo?.spatialReference,t))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:l=0}=e;if(!i)return this._fetchImage(t,s);const o=new d(0,0,0,0);let h;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,o,{signal:s}),h=await this._fetchImage(o,s)}catch(a){if(c(a))throw a;if(l<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const n=new d(m),_=await this.fetchTile(n,{...e,resamplingLevel:l+1});return f(this._tileInfoView,_,n,t)}}throw a}return f(this._tileInfoView,h,o,t)}canResume(){const t=super.canResume();return t&&this.tileMatrixSet!==null}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){c(e)||y.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}_getTileMatrixSetBySpatialReference(t){return t.tileMatrixSets?.find(e=>p(e.tileInfo?.spatialReference,this.view.spatialReference))}};u([w({readOnly:!0})],r.prototype,"tileMatrixSet",null),r=u([g("esri.views.2d.layers.WMTSLayerView2D")],r);const he=r;export{he as default};
