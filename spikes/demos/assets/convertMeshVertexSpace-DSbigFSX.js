import{G as m,s,h as p}from"./main-Di-yv68k.js";import{p as n}from"./MeshVertexAttributes-q-9MmqLN.js";import{B as a}from"./vertexSpaceConversion-D7-xylOR.js";import"./preload-helper-ExcqyqRp.js";import"./mat3-XZDRtl20.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-VhU6idD3.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-ZrCxljfK.js";import"./spatialReferenceEllipsoidUtils-BSzCM-WY.js";import"./computeTranslationToOriginAndRotation-DSwv2TbG.js";import"./projectBuffer-3mYoUKUF.js";import"./projectPointToVector-BHhPwCi8.js";import"./projection-CYLKhgpd.js";import"./meshVertexSpaceUtils-Bj2_vTTY.js";import"./MeshLocalVertexSpace-h1xx0uHm.js";import"./vec3-CnV2SnR6.js";import"./BufferView-C6ozATNo.js";import"./vec2-DGVIkCvT.js";import"./vec42-CKs01hkn.js";import"./vec4-tj8tL4il.js";async function U(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{U as convertMeshVertexSpace};
