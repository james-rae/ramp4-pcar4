import { cY as p$1, dn as ot, jm as ht, dw as e$1, k2 as at, k3 as o, k4 as l$1, aD as u$1, k5 as m, ay as m$1, N as has, bM as L, k6 as E, k7 as i, aE as s, aL as a$2, db as u$3, e5 as s$1, di as Z$1, bj as d$1, O as O$1, fy as d$2, dN as s$3, aK as s$4, k8 as O$2, aJ as f$1, k9 as y$1, ka as N$1, kb as y$2, iK as n$2, bd as e, be as y$3, bf as a$3, e6 as S$1 } from './main-CGBWc59Z.js';
import { l as l$2, $, u as u$2, Z, d, W as W$1, b as ee } from './UpdateTracking2D-tfVHyc-s.js';
import { a, S, T, W, N } from './definitions-BdwlvHBE.js';
import { b as b$3 } from './WGLContainer-DmNNClwO.js';
import { M, p as p$2, b as b$2, l as l$3, a as s$2, n as n$1 } from './AttributeStore-DeH4xv6Y.js';
import { t as t$1, y, z, a as h, p, b as b$1, u, x, c as t$2, d as t$3 } from './FeatureCommandQueue-BfkJGkV1.js';
import { a as a$1 } from './normalizeUtilsSync-Ccbt1eZm.js';
import { x as x$1, j } from './timeSupport-B8yJYqAw.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
async function l(l,o,p$1){const m=[],u$1={scaleInfo:t$1(l),scaleExpression:null};for(const e of o)switch(e.type){case"marker":m.push(...u(p$1.instances.marker,e,x,u$1));break;case"fill":null==e.spriteRasterizationParam?m.push(...p(p$1.instances.fill,e,u$1)):m.push(...b$1(p$1.instances.complexFill,e,!1,u$1));break;case"line":e.spriteRasterizationParam?m.push(...z(p$1.instances.texturedLine,e,!1,u$1)):m.push(...h(p$1.instances.line,e,!1,u$1));break;case"text":m.push(...y(p$1.instances.text,e,x,u$1));}return m}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
class c extends M{static from(t,e,r){return new c(t,e,r)}constructor(t,e,r){super(r),this._items=t,this._tile=e,this._index=-1,this._cachedGeometry=null;const s=e.lod;s.wrap&&(this._wrappingInfo={worldSizeX:s.worldSize[0]});}get _current(){return this._items[this._index]}getItem(){return this._current}getZOrder(){return this._current.zOrder}getMeshWriters(){return this._current.symbolResource?.symbolInfo.meshWriters??[]}hasField(t){return null!=this._current.attributes[t]}field(t){return this.readAttribute(t)}get geometryType(){const t=p$1(this._current.geometry);return "esriGeometryPoint"===t?"esriGeometryMultipoint":t}getCursor(){return this.copy()}copy(){const t=new c(this._items,this._tile,this.metadata);return this.copyInto(t),t}copyInto(t){super.copyInto(t),t._cachedGeometry=this._cachedGeometry,t._index=this._index;}get fields(){throw new Error("Fields reading not supported to graphics.")}get hasFeatures(){return !!this._items.length}get hasNext(){return this._index+1<this._items.length}get exceededTransferLimit(){throw new Error("InternalError: exceededTransferLimit not implemented for graphics.")}get hasZ(){return !1}get hasM(){return !1}getInTransform(){return this._tile.transform}getSize(){return this._items.length}getAttributeHash(){let t="";for(const e in this._current.attributes)t+=this._current.attributes[e];return t}getObjectId(){return this._items[this._index].objectId}getDisplayId(){return this._current.displayId}setDisplayId(t){throw new Error("InternalError: Setting displayId not supported for graphics.")}setIndex(t){this._index=t;}getIndex(){return this._index}next(){for(this._cachedGeometry=null;++this._index<this._items.length&&!this._getExists(););return this._index<this._items.length}readGeometryArea(){throw new Error("InternalError: readGeometryArea not supported for graphics.")}_readGeometry(){if(!this._cachedGeometry){let t=ot(this._current.projectedGeometry,this.hasZ,this.hasM);if("esriGeometryPolyline"===this.geometryType&&(t=ht(new e$1,t,this.hasZ,this.hasM,this.geometryType,this._tile.transform.scale[0])),this._cachedGeometry=at(new e$1,t,this.hasZ,this.hasM,this.geometryType,this._tile.transform),!this._cachedGeometry)return null;this._wrapGeometry(this._cachedGeometry);}return this._cachedGeometry}_wrapGeometry(t){if(!this._wrappingInfo)return;const{worldSizeX:e}=this._wrappingInfo;if(t.isPoint)return 1===e?(t.coords.push(a,0),t.coords.push(2*-a,0),void t.lengths.push(3)):2===e?(t.coords.push(2*a,0),t.coords.push(4*-a,0),void t.lengths.push(3)):void this._wrapVertex(t.coords,0,2,e);if("esriGeometryMultipoint"!==this.geometryType);else {if(1===e){const e=t.coords.slice();e[0]-=512;const r=t.coords.slice();r[0]+=512,t.coords.push(...e,...r);const s=t.lengths[0];return void t.lengths.push(s,s)}this._wrapVertex(t.coords,0,2,e);}}_wrapVertex(t,e,r,s){const i=e*r,o=t[i];o<-a*(s-2)?t[i]=o+a*s:o>a*(s-1)&&(t[i]=o-a*s);}_readX(){const t=this._readGeometry();return null!=t?t.coords[0]:0}_readY(){const t=this._readGeometry();return null!=t?t.coords[1]:0}_readServerCentroid(){switch(this.geometryType){case"esriGeometryPolygon":{const t=l$1(this._current.projectedGeometry),r=new e$1([],t);return at(new e$1,r,this.hasZ,this.hasM,this.geometryType,this._tile.transform)}case"esriGeometryPolyline":{const e=this._current.projectedGeometry,r=o(e.paths,this.hasZ),s=new e$1([],r);return at(new e$1,s,this.hasZ,this.hasM,this.geometryType,this._tile.transform)}}return null}_readAttribute(t,e){const r=this._current.attributes[t];if(void 0!==r)return r;const s=t.toLowerCase();for(const i in this._current.attributes)if(i.toLowerCase()===s)return this._current.attributes[i]}_readAttributes(){return this._current.attributes}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
class n{static fromGraphic(t,e,s,i){return new n(t.geometry,e,{...t.attributes},t.visible,t.uid,s,i)}constructor(e,s,i,r,o,m,n){this.geometry=e,this.symbol=s,this.attributes=i,this.visible=r,this.objectId=o,this.zOrder=m,this.displayId=n,this.bounds=u$1(),this.prevBounds=u$1(),this.size=[0,0,0,0];}get linearCIM(){return this.symbolResource?.symbolInfo.linearCIM}update(e,s,i){return (this.geometry!==e.geometry||JSON.stringify(this.attributes)!==JSON.stringify(e.attributes)||this.symbol!==s||this.zOrder!==i||this.visible!==e.visible)&&(this.prevBounds=this.bounds,this.bounds=u$1(),this.zOrder=i,this.geometry=e.geometry,this.attributes={...e.attributes},this.symbol=s,this.visible=e.visible,this.symbolResource=null,this.projectedGeometry=null,!0)}async projectAndNormalize(t){let n=this.geometry;if(!n||!n.spatialReference||"mesh"===n.type)return;"extent"===n.type&&(n=l$2(n)),await x$1(n.spatialReference,t);const p=a$1(n);if(!p)return;const h=j(p,n.spatialReference,t);h&&m(h),this.projectedGeometry=m$1(h)?l$2(h):h;}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
class t{constructor(t,e,d){this.added=t,this.updated=e,this.removed=d;}hasAnyUpdate(){return !!(this.added.length||this.updated.length||this.removed.length)}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
const f=1e-5;function _(e,t){return t.zOrder-e.zOrder}class b{constructor(e,t,s,o,i){this._items=new Map,this._boundsDirty=!1,this._outSpatialReference=e,this._cimResourceManager=t,this._hittestDrawHelper=new $(t),this._tileInfoView=s,this._store=i;const r=s.getClosestInfoForScale(o);this._resolution=this._tileInfoView.getTileResolution(r.level);}items(){return this._items.values()}getItem(e){return this._items.get(e)}async update(e,t$1,s){const o=[],i=[],r=[],n$1=new Set,m=[];let a=0;for(const l of e.items){a++;const e=l.uid,r=this._items.get(e),c=t$1(l);if(n$1.add(e),r){r.update(l,c,a)&&(i.push(r),m.push(this._updateItem(r,s)));continue}const h=this._store.createDisplayIdForObjectId(e),d=n.fromGraphic(l,c,a,h);m.push(this._updateItem(d,s)),this._items.set(d.objectId,d),o.push(d);}for(const[l,c]of this._items.entries())n$1.has(l)||(this._store.releaseDisplayIdForObjectId(l),this._items.delete(l),r.push(c));return await Promise.all(m),this._index=null,new t(o,i,r)}updateLevel(e){this._resolution!==e&&(this._index=null,this._boundsDirty=!0,this._resolution=e);}hitTest(e,t,i,n,m){const a=has("esri-mobile"),u=a?S:T,p=u+(a?0:W);e=L(e,this._tileInfoView.spatialReference);const f=n*window.devicePixelRatio*p,b=u$1();b[0]=e-f,b[1]=t-f,b[2]=e+f,b[3]=t+f;const y=n*window.devicePixelRatio*u,I=u$1();I[0]=e-y,I[1]=t-y,I[2]=e+y,I[3]=t+y;const g=.5*n*(p+u$2),j=this._searchIndex(e-g,t-g,e+g,t+g);if(!j||0===j.length)return [];const x=[],w=u$1(),S$1=u$1();for(const s of j){if(!s.visible)continue;const{projectedGeometry:e,symbolResource:t}=s;this._getSymbolBounds(w,t,e,S$1,m),S$1[3]=S$1[2]=S$1[1]=S$1[0]=0,E(w,b)&&x.push(s);}if(0===x.length)return [];const R=this._hittestDrawHelper,z=[];for(const s of x){const{projectedGeometry:e,symbolResource:t}=s;if(!t)continue;const{textInfo:o,symbolInfo:i}=t,r=i.cimSymbol;R.hitTest(I,r.symbol,e,o,m,n)&&z.push(s);}return z.sort(_),z.map((e=>e.objectId))}queryItems(e){return 0===this._items.size?[]:this._searchForItems(e)}clear(){this._items.clear(),this._index=null;}async _updateItem(e,t){await e.projectAndNormalize(this._outSpatialReference),await t(e);const{size:s}=e;s[0]=s[1]=s[2]=s[3]=0,this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0);}_searchIndex(e,s,o,i$1){return this._boundsDirty&&(this._items.forEach((e=>this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0))),this._boundsDirty=!1),this._index||(this._index=i(9,(e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}))),this._index.load(Array.from(this._items.values()))),this._index.search({minX:e,minY:s,maxX:o,maxY:i$1})}_searchForItems(e){const t=this._tileInfoView.spatialReference,o=e.bounds,i=s(t);if(i&&t.isWrappable){const[t,r]=i.valid,n=Math.abs(o[2]-r)<f,m=Math.abs(o[0]-t)<f;if((!n||!m)&&(n||m)){const i=e.resolution;let m;m=u$1(n?[t,o[1],t+i*u$2,o[3]]:[r-i*u$2,o[1],r,o[3]]);const a=this._searchIndex(o[0],o[1],o[2],o[3]),l=this._searchIndex(m[0],m[1],m[2],m[3]);return [...new Set([...a,...l])]}}return this._searchIndex(o[0],o[1],o[2],o[3])}_getSymbolBounds(t,o,r,n,m){if(!o||!o.symbolInfo.linearCIM||!r)return null;if(t||(t=u$1()),a$2(t,r),!n||0===n[0]&&0===n[1]&&0===n[2]&&0===n[3]){const{textInfo:t,symbolInfo:s}=o,i=s.cimSymbol;n||(n=[0,0,0,0]);const r=Z.getSymbolInflateSize(n,i.symbol,this._cimResourceManager,m,t);n[0]=u$3(r[0]),n[1]=u$3(r[1]),n[2]=u$3(r[2]),n[3]=u$3(r[3]);}const l=this._resolution,c=Z.safeSize(n);return t[0]-=c*l,t[1]-=c*l,t[2]+=c*l,t[3]+=c*l,t}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.30/esri/copyright.txt for details.
*/
class O{static getOrCreate(e,t,r){let s=t.get(e.id);return s||(s=new O(e,r),t.set(e.id,s)),s}static fromItems(e,t,r){const s=new O(e,r);return s.addedOrModified.push(...t),s}constructor(e,t){this.tile=e,this.metadata=t,this.addedOrModified=[],this.removed=[];}get reader(){return this._reader||(this._reader=c.from(this.addedOrModified,this.tile,this.metadata)),this._reader}}let F=class extends(s$1(S$1)){constructor(e){super(e),this._attached=!1,this._tiles=new Map,this._controller=new AbortController,this._hashToSymbolInfo=new Map,this._lastCleanup=performance.now(),this._cleanupRequired=!0,this.lastUpdateId=-1,this.renderer=null,this._updateTracking=new d({debugName:"GraphicsView2D"}),this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this._commandQueue=new t$2({process:e=>{if("update"===e.type)return this._update();throw new Error("InternalError: Unsupported command")}}),this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this);}destroy(){this.container.destroy(),this.view=null,this.renderer=null,this._set("graphics",null),this._controller.abort(),this._graphicStore.clear(),this._attributeStore=null,this._hashToSymbolInfo.clear(),this._updateTracking.destroy(),this._commandQueue.destroy();}_initAttributeStore(){this._storage=new p$2({spatialReference:this.view.spatialReference,fields:new Z$1}),this._attributeStore=new b$2({isLocal:!0,update:e=>{has("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateStart`,{message:e}),this.container.attributeView.requestUpdate(e),this.container.requestRender(),has("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateEnd`,{message:e});}});const e=t$3(null,[]);this._attributeStore.update(e,this._storage,null),this.container.checkHighlight=()=>this._attributeStore.hasHighlight;}initialize(){this._initAttributeStore(),this._metadata=l$3.create(this.view.spatialReference),this._resourceProxy=new s$2({fetch:e=>Promise.all(e.map((e=>this.view.stage.textureManager.rasterizeItem(e)))),fetchDictionary:e=>{throw new Error("InternalError: Graphics do not support Dictionary requests")}}),this.addHandles([d$1((()=>this._effectiveRenderer),(()=>this._pushUpdate())),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.addHandles([this.graphics.on("change",(()=>this._pushUpdate()))]),this._graphicStore=new b(this.view.spatialReference,this._cimResourceManager,this.view.featuresTilingScheme,this.view.state.scale,this._attributeStore),this._attached=!0,this.requestUpdate(),this._pushUpdate();}))]),this._updateTracking.addUpdateTracking("CommandQueue",this._commandQueue.updateTracking);const e=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:e,removed:[]});}get _effectiveRenderer(){return "function"==typeof this.renderer?this.renderer():this.renderer}get _cimResourceManager(){return this.view.stage.textureManager.resourceManager}get updating(){const e=!this._attached||this._updateTracking.updating;return has("esri-2d-log-updating")&&console.log(`Updating GraphicsView2D: ${e}\n  -> attaching ${!this._attached}\n  -> updateTracking ${this._updateTracking.updating}`),e}hitTest(e){if(!this.view||this.view.suspended)return [];const{resolution:t,rotation:s}=this.view.state,i=this._graphicStore.hitTest(e.x,e.y,2,t,s),o=new Set(i),a=this.graphics.items.reduce(((e,t)=>(o.has(t.uid)&&e.set(t.uid,t),e)),new Map);return i.map((e=>a.get(e))).filter(O$1)}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback()),this.notifyChange("updating");}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e));}viewChange(){this.requestUpdate();}setHighlight(e){const t=[];for(const{objectId:r,highlightFlags:s}of e){const e=this._graphicStore.getItem(r)?.displayId;t.push({objectId:r,highlightFlags:s,displayId:e});}this._attributeStore.setHighlight(t,e),this._pushUpdate();}graphicUpdateHandler(e){this._pushUpdate();}update(e){this.updateRequested=!1,this._attached&&this._graphicStore.updateLevel(e.state.resolution);}pushUpdate(){this._pushUpdate();}_pushUpdate(){d$2(this._commandQueue.push({type:"update"}));}async _update(){try{has("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView._update start`);const e=await this._graphicStore.update(this.graphics,(e=>this._getSymbolForGraphic(e)),(e=>this._ensureSymbolResource(e)));if(!e.hasAnyUpdate())return void this._attributeStore.sendUpdates();e.removed.length&&(this._cleanupRequired=!0),has("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView updateMessage`,e);const t=this._createTileMessages(e);await this._fetchResources(t),this._write(t);for(const r of e.added)this._setFilterState(r);for(const r of e.updated)this._setFilterState(r);has("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate`,e),this._attributeStore.sendUpdates(),has("esri-2d-update-debug")&&console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate.await`,e);}catch(e){}this._cleanupSharedResources();}_createTileMessages(e){const t=new Map;for(const r of e.added){const e=this.view.graphicsTileStore.getIntersectingTiles(r.bounds);for(const s of e){O.getOrCreate(s,t,this._metadata).addedOrModified.push(r);}}for(const r of e.updated){const e=this.view.graphicsTileStore.getIntersectingTiles(r.prevBounds),s=this.view.graphicsTileStore.getIntersectingTiles(r.bounds);for(const i of e){O.getOrCreate(i,t,this._metadata).removed.push(r.displayId);}for(const i of s){O.getOrCreate(i,t,this._metadata).addedOrModified.push(r);}}for(const r of e.removed){const e=this.view.graphicsTileStore.getIntersectingTiles(r.bounds);for(const s of e){O.getOrCreate(s,t,this._metadata).removed.push(r.displayId);}}return Array.from(t.values())}async _fetchResources(e){for(const{tile:t,reader:r}of e){has("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.id}] GraphicsView fetchResources`,e);const s=r.getCursor();for(;s.next();)for(const e of s.getMeshWriters())e.enqueueRequest(this._resourceProxy,s,t.createArcadeEvaluationOptions(this.view.timeZone));}await this._resourceProxy.fetchEnqueuedResources();}_write(e){for(const t of e){has("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView write`,t);const e=this._writeMeshes(t);let r=this._tiles.get(t.tile.key);r||(r=this._createFeatureTile(t.tile.key)),has("esri-2d-update-debug")&&console.debug(`Id[${this.layerId}] Tile[${t.tile.id}] GraphicsView onTileData`,t),this.container.onTileData(r,{type:"update",modify:e,remove:t.removed,end:!1,attributeEpoch:this._attributeStore.epoch}),this.container.requestRender();}}_writeMeshes(e){const t=new n$1(e.tile.id),r=e.reader.getCursor();for(;r.next();){t.entityStart(r.getDisplayId(),r.getZOrder());for(const s of r.getMeshWriters())s.write(t,this._resourceProxy,r,e.tile.createArcadeEvaluationOptions(this.view.timeZone),e.tile.level);t.entityEnd();}return {...t.serialize().message,tileId:e.tile.id}}_setFilterState(e){const t=e.displayId,r=this._attributeStore.getHighlightFlags(e.objectId);this._attributeStore.setData(t,0,0,r|(e.visible?N:0));}_getSymbolForGraphic(e){return null!=e.symbol?e.symbol:null!=this._effectiveRenderer?this._effectiveRenderer.getSymbol(e):this._getNullSymbol(e)}async _ensureSymbolResource(e){if(!e.symbol)return;const t=await this._getSymbolInfo(e.symbol);if(!t)return;const r=t.linearCIM.filter((e=>"text"===e.type));if(r.length>0){const s=await this._getTextResources(e,r);e.symbolResource={symbolInfo:t,textInfo:s};}else e.symbolResource={symbolInfo:t};}_getSymbolInfo(e){const t=e.hash();return this._hashToSymbolInfo.has(t)||this._hashToSymbolInfo.set(t,this._createSymbolInfo(t,e).catch((e=>null))),this._hashToSymbolInfo.get(t)}async _createSymbolInfo(e,t){const r=await this._convertToCIMSymbol(t),s=await this._createLinearCIM(r);return {hash:e,cimSymbol:r,linearCIM:s,meshWriters:await this._createMeshWriters(r,s)}}async _convertToCIMSymbol(e){const t=W$1(e);if("web-style"===t.type){return (await t.fetchCIMSymbol()).data}return t}async _createLinearCIM(e){return await Promise.all(ee.fetchResources(e.symbol,this._cimResourceManager,[])),this.view.stage.cimAnalyzer.analyzeSymbolReference(e,!1)}async _createMeshWriters(e,t){s$3(this._controller.signal);const r=this.container.instanceStore,s=this.view.stage.meshWriterRegistry,i=await l(e,t,r);return Promise.all(i.map((e=>s.createMeshWriter(this._storage,this._resourceProxy,{tileInfo:this.view.featuresTilingScheme.tileInfo},e))))}_onTileUpdate(e){if(e.added&&e.added.length>0)for(const t of e.added)this._updateTracking.addPromise(this._addTile(t));if(e.removed&&e.removed.length>0)for(const t of e.removed)this._removeTile(t.key);}_createFeatureTile(e){const t=this.view.featuresTilingScheme.getTileBounds(u$1(),e),r=this.view.featuresTilingScheme.getTileResolution(e.level),s=new b$3(e,r,t[0],t[3]);return this._tiles.set(e,s),this.container.addChild(s),s}async _addTile(e){if(!this._attached)return;const t=this._graphicStore.queryItems(e);if(!t.length)return;const r=this._createFeatureTile(e.key),s=O.fromItems(e,t,this._metadata);await this._fetchResources([s]);const i=this._writeMeshes(s);r.onMessage({type:"append",append:i,clear:!1,end:!0,attributeEpoch:this._attributeStore.epoch});}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e);}_getNullSymbol(e){const t=e.geometry;return s$4(t)?O$2:f$1(t)||m$1(t)?y$1:this.defaultPointSymbolEnabled?N$1:null}async _getTextResources(e,t){const r=new Array,s=new Array;for(let i=0;i<t.length;i++){const o=t[i],{resource:a,overrides:n}=o.textRasterizationParam;if(n?.length>0){const t=y$2.resolveSymbolOverrides({type:"CIMSymbolReference",primitiveOverrides:n,symbol:{type:"CIMPointSymbol",symbolLayers:[{type:"CIMVectorMarker",enable:!0,size:a.symbol.height,anchorPointUnits:"Relative",frame:{xmin:-5,ymin:-5,xmax:5,ymax:5},markerGraphics:[{type:"CIMMarkerGraphic",geometry:{x:0,y:0},symbol:a.symbol,textString:a.textString}],scaleSymbolsProportionally:!0,respectFrame:!0}]}},e,this.view.spatialReference,null,p$1(e.projectedGeometry),null,null);t.then((e=>{const t=e.symbolLayers[0],{textString:r}=t.markerGraphics[0];s.push({type:"cim-rasterization-info",resource:{type:"text",textString:r||"",font:a.font}}),o.text=a.textString=r||"";})),r.push(t);}else s.push({type:"cim-rasterization-info",resource:a});}r.length>0&&await Promise.all(r);const o=s.map((e=>this.view.stage.textureManager.rasterizeItem(e))),a=await Promise.all(o);n$2(a);const n=new Map;for(let i=0;i<t.length;i++){const e=t[i];n.set(e.textRasterizationParam.resource.symbol,{text:e.text,glyphMosaicItems:a[i]});}return n}_cleanupSharedResources(){if(!this._cleanupRequired)return;const e=performance.now();if(e-this._lastCleanup<5e3)return;this._cleanupRequired=!1,this._lastCleanup=e;const t=new Set;for(const s of this._graphicStore.items()){const e=s.symbolResource?.symbolInfo.hash;t.add(e);}const r=new Set(this._hashToSymbolInfo.keys());for(const s of r.values())t.has(s)||this._hashToSymbolInfo.delete(s);}};e([y$3()],F.prototype,"_effectiveRenderer",null),e([y$3({constructOnly:!0})],F.prototype,"layerId",void 0),e([y$3({constructOnly:!0})],F.prototype,"requestUpdateCallback",void 0),e([y$3()],F.prototype,"container",void 0),e([y$3({constructOnly:!0})],F.prototype,"graphics",void 0),e([y$3()],F.prototype,"renderer",void 0),e([y$3()],F.prototype,"_updateTracking",void 0),e([y$3()],F.prototype,"updating",null),e([y$3()],F.prototype,"view",void 0),e([y$3()],F.prototype,"updateRequested",void 0),e([y$3()],F.prototype,"defaultPointSymbolEnabled",void 0),F=e([a$3("esri.views.2d.layers.graphics.GraphicsView2D")],F);const V=F;

export { V };
